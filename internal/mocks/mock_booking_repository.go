// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/booking.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "glofox-backend/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingRepository) Create(booking *models.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookingRepositoryMockRecorder) Create(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingRepository)(nil).Create), booking)
}

// GetAll mocks base method.
func (m *MockBookingRepository) GetAll() []*models.Booking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Booking)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBookingRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBookingRepository)(nil).GetAll))
}

// GetByClassAndDate mocks base method.
func (m *MockBookingRepository) GetByClassAndDate(classID string, date time.Time) []*models.Booking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClassAndDate", classID, date)
	ret0, _ := ret[0].([]*models.Booking)
	return ret0
}

// GetByClassAndDate indicates an expected call of GetByClassAndDate.
func (mr *MockBookingRepositoryMockRecorder) GetByClassAndDate(classID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClassAndDate", reflect.TypeOf((*MockBookingRepository)(nil).GetByClassAndDate), classID, date)
}

// GetByID mocks base method.
func (m *MockBookingRepository) GetByID(id string) (*models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookingRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookingRepository)(nil).GetByID), id)
}
